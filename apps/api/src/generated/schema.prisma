// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../src/generated"
  // previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  hash    String
  salt    String
  profile Profile?
}

model Profile {
  uid      String  @id @default(auto()) @map("_id") @db.ObjectId
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique @db.ObjectId
  role     Role
  username String  @unique
  email    String  @unique
  image    String?
}

model Folder {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  folderId String  @unique @default(uuid())
  pathname String  @unique
  name     String
  label    String?
  parentId String
  files    File[]

  stat       Stat?
  permission Permission?
}

model File {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  fileId   String  @unique @default(uuid())
  pathname String  @unique
  name     String
  label    String?
  type     Media   @default(unknown)

  folder           Folder? @relation(fields: [folderRelationId], references: [id])
  folderRelationId String  @db.ObjectId
  folderId         String

  stat       Stat?
  permission Permission?
}

type Stat {
  size     Float?
  createAt DateTime?
  updateAt DateTime?
}

type Permission {
  private         Boolean
  authorizedRoles Role[]
}

// media

model Audio {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  fileId   String  @unique @default(uuid())
  name     String
  url      String
  label    String?
  author   String?
  duration Float?
  cover    String?
}

model Video {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  fileId   String  @unique @default(uuid())
  name     String
  url      String
  label    String?
  author   String?
  duration Float?
}

model Markdown {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  fileId   String  @unique @default(uuid())
  name     String
  url      String
  label    String?
  abstract String?
  author   String?
}

model Image {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  fileId String  @unique @default(uuid())
  name   String
  url    String
  label  String?
}

enum Media {
  audio
  video
  markdown
  image
  unknown
}

enum Role {
  visitor
  user
  admin
}
